requirements.txt
requests>=2.31.0
PyYAML>=6.0.1
Pillow>=10.0.0
python-dotenv>=1.0.0

.env.example
NOTION_TOKEN=your_notion_integration_token_here
NOTION_PARENT_PAGEID=your_parent_page_id_here
NOTION_VERSION=2022-06-28
THROTTLE_RPS=2.5
ENABLE_SEARCH_FALLBACK=true
NOTION_TIMEOUT=30
RETRY_MAX=5
RETRY_BACKOFF_BASE=1.5
LOG_LEVEL=INFO
LOG_FILE=logs/deployment.log
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5
GITHUB_ASSETS_REPO=jonathanhollander/notion-assets
GITHUB_ASSETS_BRANCH=main

config.yaml
base_url: https://api.notion.com
notion_api_version: "2022-06-28"
rate_limit_rps: 2.5
default_timeout: 30
max_retries: 5
backoff_base: 1.5
visual_config:
  tier: "premium"
  github_assets_base_url: "https://raw.githubusercontent.com/jonathanhollander/notion-assets/main/assets"
  default_theme: "default"
  themes:
    executive_blue:
      primary: "#1E3A8A"
      accent: "#60A5FA"
      text: "#1F2937"
    legacy_purple:
      primary: "#581C87"
      accent: "#A78BFA"
      text: "#1F2937"
    heritage_green:
      primary: "#14532D"
      accent: "#86EFAC"
      text: "#1F2937"
  estate_emoji:
    document: "📄"
    legal: "⚖️"
    signature: "✍️"
    sealed: "📜"
    family: "👨‍👩‍👧‍👦"
    legacy: "🏛️"
    heritage: "🌳"
    generations: "👥"
    assets: "🏦"
    property: "🏡"
    investment: "📈"
    secure: "🔒"
    complete: "✓"
    pending: "○"
    in_progress: "◐"
    important: "•"
    section: "▸"
    subsection: "▪"
    divider: "―"
    hierarchy: "├"
    verified: "✓"
    attention: "!"
    confidential: "🔐"
    archived: "🗄️"

modules/logging_config.py
import logging
import os
from pathlib import Path
from logging.handlers import RotatingFileHandler
from typing import Optional
def setup_logging(log_level:str=None,log_file:str=None,log_max_size:int=None,log_backup_count:int=None,console_output:bool=True)->logging.Logger:
    log_level=log_level or os.getenv('LOG_LEVEL','INFO')
    log_file=log_file or os.getenv('LOG_FILE','logs/deployment.log')
    log_max_size=log_max_size or int(os.getenv('LOG_MAX_SIZE',10485760))
    log_backup_count=log_backup_count or int(os.getenv('LOG_BACKUP_COUNT',5))
    log_path=Path(log_file)
    log_path.parent.mkdir(parents=True,exist_ok=True)
    logger=logging.getLogger('estate_planning')
    logger.setLevel(getattr(logging,log_level.upper()))
    logger.handlers.clear()
    formatter=logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',datefmt='%Y-%m-%d %H:%M:%S')
    file_handler=RotatingFileHandler(log_file,maxBytes=log_max_size,backupCount=log_backup_count)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    if console_output:
        console_handler=logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
    logger.info(f"Logging initialized - Level: {log_level}, File: {log_file}")
    return logger
def get_logger(name:Optional[str]=None)->logging.Logger:
    if name:
        return logging.getLogger(f'estate_planning.{name}')
    return logging.getLogger('estate_planning')