{
  "permissions": {
    "allow": [
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__task-master__initialize_project",
      "mcp__task-master__rules",
      "Bash(mkdir:*)",
      "mcp__codebase-rag__embedding_documents",
      "mcp__codebase-rag__query_documents",
      "Bash(find:*)",
      "Bash(textutil:*)",
      "mcp__zen__consensus",
      "mcp__zen__codereview",
      "Read(/Users/jonathanhollander/**)",
      "Bash(grep:*)",
      "mcp__zen__debug",
      "mcp__zen__analyze",
      "mcp__zen__refactor",
      "Bash(sed:*)",
      "mcp__notion__API-post-page",
      "mcp__notion__API-patch-block-children",
      "mcp__memory__create_entities",
      "mcp__mermaid__generate",
      "mcp__task-master__parse_prd",
      "mcp__zen__chat",
      "mcp__tavily__searchQNA",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "mcp__task-master__models",
      "mcp__task-master__generate",
      "Bash(python:*)",
      "Bash(chmod:*)",
      "Bash(./auditor_compliance_check.sh:*)",
      "Bash(bash:*)",
      "mcp__filesystem__fast_search_files",
      "mcp__filesystem__fast_list_directory",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "mcp__filesystem__fast_read_file",
      "mcp__filesystem__fast_read_multiple_files",
      "Read(/private/tmp/**)",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "Read(/tmp/**)",
      "mcp__notion__API-post-search",
      "mcp__notion__API-get-block-children",
      "mcp__notion__API-retrieve-a-page",
      "mcp__task-master__get_tasks",
      "mcp__filesystem__fast_search_code",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "Read(/Users/jonathanhollander/**)",
      "WebFetch(domain:developers.notion.com)",
      "Bash(cd:*)",
      "mcp__task-master__set_task_status",
      "mcp__task-master__get_task",
      "mcp__memory__create_relations",
      "mcp__github__create_issue",
      "mcp__filesystem__fast_write_file",
      "mcp__task-master__expand_all",
      "mcp__task-master__expand_task",
      "mcp__task-master__update_task",
      "mcp__task-master-ai__parse_prd",
      "mcp__task-master-ai__models",
      "mcp__task-master-ai__expand_task",
      "mcp__task-master-ai__expand_all",
      "mcp__task-master-ai__get_tasks",
      "mcp__task-master-ai__add_task",
      "mcp__task-master-ai__remove_task",
      "mcp__filesystem__fast_edit_file",
      "mcp__filesystem__fast_get_directory_tree",
      "Read(/Users/jonathanhollander/**)",
      "mcp__tavily__search",
      "mcp__memory__add_observations",
      "mcp__roo-cline-memory__append_memory_bank_entry",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(gh repo create:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(gh repo rename:*)",
      "Bash(git remote set-url:*)",
      "mcp__filesystem__fast_get_file_info",
      "mcp__task-master-ai__initialize_project",
      "mcp__task-master-ai__set_task_status",
      "Bash(git init:*)",
      "Bash(cd:*)",
      "Bash(git commit:*)",
      "mcp__mcp-code-graph__folder-tree-structure",
      "Bash(cd:*)",
      "Read(//**)",
      "Bash(if [ ! -z \"$NOTION_TOKEN\" ])",
      "Bash(then echo \"✅ NOTION_TOKEN found in environment\")",
      "Bash(else echo \"❌ NOTION_TOKEN not found in environment\")",
      "Bash(fi)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(source:*)",
      "Bash(source ~/.bashrc)",
      "Bash(env)",
      "WebFetch(domain:openrouter.ai)",
      "WebSearch",
      "WebFetch(domain:replicate.com)",
      "Bash(pip3 install:*)",
      "Bash(timeout 30s python3:*)",
      "mcp__task-master-ai__update_task",
      "mcp__task-master-ai__get_task",
      "Bash(git fetch:*)",
      "Bash(gh pr:*)",
      "Bash(gh issue:*)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "task-master-ai"
  ]
}